eng <- read.csv(here("data", "tidy", "eng_data.csv"))
eng <- read.csv(here("data", "tidy", "eng.csv"))
# load data
library(readr)
library(here)
library(tidyverse)
eng <- read.csv(here("data", "tidy", "eng.csv"))
# load data
library(readr)
library(here)
library(tidyverse)
eng <- read.csv(here("data", "eng.csv"))
pol <- read.csv(here("data", "pol.csv"))
nor <- read.csv(here("data", "nor.csv"))
View(eng)
eng %>%
group_by(rating, sentence_type_eng) %>%
summarise(n = n()) %>%
knitr::kable(caption = "English acceptable")
eng %>%
filter(sentence_type_eng == "unacceptable_mono_own")
group_by(rating) %>%
summarise(n = n()) %>%
knitr::kable(caption = "English acceptable")
eng %>%
filter(sentence_type_eng == "unacceptable_mono_own") %>%
group_by(rating) %>%
summarise(n = n()) %>%
knitr::kable(caption = "English acceptable")
eng %>%
filter(sentence_type_eng == "unacceptable_mono_own") %>%
group_by(rating) %>%
summarise(n = n()) %>%
knitr::kable(caption = "unacceptable_mono_own")
unacceptable_mono_own_eng <- eng %>%
filter(sentence_type_eng == "unacceptable_mono_own") %>%
group_by(rating) %>%
summarise(unacceptable_mono_own = n())
View(unacceptable_mono_own_eng)
unacceptable_mono_own_eng <- eng %>%
filter(sentence_type_eng == "unacceptable_mono_own") %>%
group_by(rating) %>%
summarise(unacceptable_mono_own = n())
unacceptable_di_own_eng <- eng %>%
filter(sentence_type_eng == "unacceptable_di_own") %>%
group_by(rating) %>%
summarise(unacceptable_di_own = n())
unacceptable_mono_own_eng <- eng %>%
filter(sentence_type_eng == "unacceptable_mono_own") %>%
group_by(rating) %>%
summarise(unacceptable_mono_own = n())
unacceptable_di_own_eng <- eng %>%
filter(sentence_type_eng == "unacceptable_di_own") %>%
group_by(rating) %>%
summarise(unacceptable_di_own = n())
acceptable_mono_poss_eng <- eng %>%
filter(sentence_type_eng == "acceptable_mono_poss") %>%
group_by(rating) %>%
summarise(acceptable_mono_poss = n())
acceptable_di_poss_eng <- eng %>%
filter(sentence_type_eng == "acceptable_di_poss") %>%
group_by(rating) %>%
summarise(acceptable_di_poss = n())
left_join(unacceptable_mono_own_eng, unacceptable_di_own_eng, by = rating)
View(acceptable_di_poss_eng)
View(acceptable_mono_poss_eng)
View(acceptable_di_poss_eng)
left_join(unacceptable_mono_own_eng, unacceptable_di_own_eng, by = "rating")
left_join(unacceptable_mono_own_eng, unacceptable_di_own_eng,
acceptable_mono_poss_eng,  acceptable_di_poss_eng,
by = "rating")
View(acceptable_mono_poss_eng)
View(acceptable_mono_poss_eng)
View(acceptable_di_poss_eng)
View(acceptable_mono_poss_eng)
View(acceptable_di_poss_eng)
View(acceptable_mono_poss_eng)
left_join(unacceptable_mono_own_eng, unacceptable_di_own_eng,
by = "rating")
left_join(acceptable_mono_poss_eng,  acceptable_di_poss_eng,
by = "rating")
left_join(unacceptable_mono_own_eng, unacceptable_di_own_eng,
by = "rating")
un <- left_join(unacceptable_mono_own_eng, unacceptable_di_own_eng,
by = "rating")
ac <- left_join(acceptable_mono_poss_eng,  acceptable_di_poss_eng,
by = "rating")
left_join(ac, un, by = "rating")
library(here)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = FALSE, dpi = 900)
library(here)
library(tidyverse)
eng <- read.csv(here("data", "eng.csv"))
pol <- read.csv(here("data", "pol.csv"))
nor <- read.csv(here("data", "nor.csv"))
library(here)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = FALSE, dpi = 900)
library(here)
library(tidyverse)
eng <- read.csv(here("data", "eng.csv"))
pol <- read.csv(here("data", "pol.csv"))
nor <- read.csv(here("data", "nor.csv"))
vlines_n<- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph_nor$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph_nor$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph_nor$beta[[3]])# sentence_type_norunacceptable_mono_poss
library(ordinal)
norway_data <- read.csv(here("data", "nor.csv"))
polish_data <- read.csv(here("data", "pol.csv"))
clmm.graph_nor <- clmm(rating ~ sentence_type_pol + (1 | participant_no),
data = norway_data, Hess=TRUE)
clmm.graph_pol <- clmm(rating ~ sentence_type_nor + (1 | participant_no),
data = polish_data, Hess=TRUE)
vlines_n<- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph_nor$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph_nor$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph_nor$beta[[3]])# sentence_type_norunacceptable_mono_poss
clmm.graph_nor <- clmm(rating ~ sentence_type_pol + (1 | participant_no),
data = norway_data, Hess=TRUE)
clmm.graph_nor <- clmm(rating ~ sentence_type_nor + (1 | participant_no),
data = norway_data, Hess=TRUE)
vlines_n<- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph_nor$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph_nor$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph_nor$beta[[3]])# sentence_type_norunacceptable_mono_poss
clmm.graph_nor <- clmm(rating ~ sentence_type_nor + (1 | participant_no),
data = norway_data, Hess=TRUE)
clmm.graph_pol <- clmm(rating ~ sentence_type_pol + (1 | participant_no),
data = polish_data, Hess=TRUE)
vlines_n<- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph_nor$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph_nor$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph_nor$beta[[3]])# sentence_type_norunacceptable_mono_poss
norway_data <- read.csv(here("data", "nor.csv"))
polish_data <- read.csv(here("data", "pol.csv"))
clmm.graph_nor <- clmm(rating ~ sentence_type_nor + (1 | participant_no),
data = norway_data, Hess=TRUE)
clmm.graph_nor <- clmm(as.factor(rating) ~ sentence_type_nor + (1 | participant_no),
data = norway_data, Hess=TRUE)
clmm.graph_pol <- clmm(as.factor(rating) ~ sentence_type_pol + (1 | participant_no),
data = polish_data, Hess=TRUE)
vlines_n<- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph_nor$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph_nor$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph_nor$beta[[3]])# sentence_type_norunacceptable_mono_poss
vlines_p <- c(0, # intercept, 0 = sentence_type_polacceptable_di_refl
clmm.graph_pol$beta[[1]], # sentence_type_polacceptable_mono_refl
clmm.graph_pol$beta[[2]], # sentence_type_polunacceptable_di_poss
clmm.graph_pol$beta[[3]])# sentence_type_polunacceptable_mono_poss
xaxis_n <- seq(min(vlines_n-.5), max(vlines_n+.5), length.out = 100) # create 100 steps
yaxis_n <- rep(c(0,1),50) # fill in 0s and 1s for y-axis
xaxis_p <- seq(min(vlines_p-.5), max(vlines_p+.5), length.out = 100) # create 100 steps
yaxis_p <- rep(c(0,1),50) # fill in 0s and 1s for y-axis
colors <- c("one" = "orangered",
"two" = "orange2",
"three" = "yellow",
"four" = "green",
"five" = "turquoise")
tibble(xaxis_n,yaxis_n) %>% # baseline tibble for plot dimensions
mutate(one_n=  plogis(clmm.graph_nor$Theta[1] - xaxis_n), # add column for rating levels (must be adapted for larger scales)
two_n=  plogis(clmm.graph_nor$Theta[2] - xaxis_n) - plogis(clmm.graph_nor$Theta[1] - xaxis_n),
three_n=plogis(clmm.graph_nor$Theta[3] - xaxis_n) - plogis(clmm.graph_nor$Theta[2] - xaxis_n),
four_n= plogis(clmm.graph_nor$Theta[4] - xaxis_n) - plogis(clmm.graph_nor$Theta[3] - xaxis_n),
five_n=1 - (plogis(clmm.graph_nor$Theta[2] - xaxis_n)))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p)))
tibble(xaxis_n,yaxis_n) %>% # baseline tibble for plot dimensions
mutate(one_n=  plogis(clmm.graph_nor$Theta[1] - xaxis_n), # add column for rating levels (must be adapted for larger scales)
two_n=  plogis(clmm.graph_nor$Theta[2] - xaxis_n) - plogis(clmm.graph_nor$Theta[1] - xaxis_n),
three_n=plogis(clmm.graph_nor$Theta[3] - xaxis_n) - plogis(clmm.graph_nor$Theta[2] - xaxis_n),
four_n= plogis(clmm.graph_nor$Theta[4] - xaxis_n) - plogis(clmm.graph_nor$Theta[3] - xaxis_n),
five_n=1 - (plogis(clmm.graph_nor$Theta[2] - xaxis_n)))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p)))
) %>%
gather(rating,probability,3:7)
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p)))
) %>%
gather(rating,probability,3:7))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7)
tibble(xaxis_n,yaxis_n) %>% # baseline tibble for plot dimensions
mutate(one_n=  plogis(clmm.graph_nor$Theta[1] - xaxis_n), # add column for rating levels (must be adapted for larger scales)
two_n=  plogis(clmm.graph_nor$Theta[2] - xaxis_n) - plogis(clmm.graph_nor$Theta[1] - xaxis_n),
three_n=plogis(clmm.graph_nor$Theta[3] - xaxis_n) - plogis(clmm.graph_nor$Theta[2] - xaxis_n),
four_n= plogis(clmm.graph_nor$Theta[4] - xaxis_n) - plogis(clmm.graph_nor$Theta[3] - xaxis_n),
five_n=1 - (plogis(clmm.graph_nor$Theta[2] - xaxis_n))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one","two","three","four","five")))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one","two","three","four","five")))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one","two","three","four","five")))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7)
plogis(clmm.graph_pol$Theta[1] - xaxis_p)
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p)))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7)
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p")))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p")))
tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p")))
# establish the colour-rating level correspondence
tibble(xaxis_n,yaxis_n) %>% # baseline tibble for plot dimensions
mutate(one_n=  plogis(clmm.graph_nor$Theta[1] - xaxis_n), # add column for rating levels (must be adapted for larger scales)
two_n=  plogis(clmm.graph_nor$Theta[2] - xaxis_n) - plogis(clmm.graph_nor$Theta[1] - xaxis_n),
three_n=plogis(clmm.graph_nor$Theta[3] - xaxis_n) - plogis(clmm.graph_nor$Theta[2] - xaxis_n),
four_n= plogis(clmm.graph_nor$Theta[4] - xaxis_n) - plogis(clmm.graph_nor$Theta[3] - xaxis_n),
five_n=1 - (plogis(clmm.graph_nor$Theta[2] - xaxis_n))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one","two","three","four","five")))
tibble(xaxis_n,yaxis_n) %>% # baseline tibble for plot dimensions
mutate(one_n=  plogis(clmm.graph_nor$Theta[1] - xaxis_n), # add column for rating levels (must be adapted for larger scales)
two_n=  plogis(clmm.graph_nor$Theta[2] - xaxis_n) - plogis(clmm.graph_nor$Theta[1] - xaxis_n),
three_n=plogis(clmm.graph_nor$Theta[3] - xaxis_n) - plogis(clmm.graph_nor$Theta[2] - xaxis_n),
four_n= plogis(clmm.graph_nor$Theta[4] - xaxis_n) - plogis(clmm.graph_nor$Theta[3] - xaxis_n),
five_n=1 - (plogis(clmm.graph_nor$Theta[2] - xaxis_n))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_n","two_n","three_n","four_n","five_n")))
nor_tib <- tibble(xaxis_n,yaxis_n) %>% # baseline tibble for plot dimensions
mutate(one_n=  plogis(clmm.graph_nor$Theta[1] - xaxis_n), # add column for rating levels (must be adapted for larger scales)
two_n=  plogis(clmm.graph_nor$Theta[2] - xaxis_n) - plogis(clmm.graph_nor$Theta[1] - xaxis_n),
three_n=plogis(clmm.graph_nor$Theta[3] - xaxis_n) - plogis(clmm.graph_nor$Theta[2] - xaxis_n),
four_n= plogis(clmm.graph_nor$Theta[4] - xaxis_n) - plogis(clmm.graph_nor$Theta[3] - xaxis_n),
five_n=1 - (plogis(clmm.graph_nor$Theta[2] - xaxis_n))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_n","two_n","three_n","four_n","five_n")))
polish_tib <- tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p"))) %>% # make factor and relevel
polish_tib <- tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p"))) %>% # make factor and relevel
polish_tib <- tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p")))
polish_tib <- tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p")))
View(polish_tib)
# establish the colour-rating level correspondence
nor_tib <- tibble(xaxis_n,yaxis_n) %>% # baseline tibble for plot dimensions
mutate(one_n=  plogis(clmm.graph_nor$Theta[1] - xaxis_n), # add column for rating levels (must be adapted for larger scales)
two_n=  plogis(clmm.graph_nor$Theta[2] - xaxis_n) - plogis(clmm.graph_nor$Theta[1] - xaxis_n),
three_n=plogis(clmm.graph_nor$Theta[3] - xaxis_n) - plogis(clmm.graph_nor$Theta[2] - xaxis_n),
four_n= plogis(clmm.graph_nor$Theta[4] - xaxis_n) - plogis(clmm.graph_nor$Theta[3] - xaxis_n),
five_n=1 - (plogis(clmm.graph_nor$Theta[2] - xaxis_n))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_n","two_n","three_n","four_n","five_n"))) %>%
rename(xaxis = xaxis_n) %>%
rename(yaxis = yaxis_n)
polish_tib <- tibble(xaxis_p,yaxis_p) %>%
mutate(one_p=  plogis(clmm.graph_pol$Theta[1] - xaxis_p), # add column for rating levels (must be adapted for larger scales)
two_p=  plogis(clmm.graph_pol$Theta[2] - xaxis_p) - plogis(clmm.graph_pol$Theta[1] - xaxis_p),
three_p=plogis(clmm.graph_pol$Theta[3] - xaxis_p) - plogis(clmm.graph_pol$Theta[2] - xaxis_p),
four_p= plogis(clmm.graph_pol$Theta[4] - xaxis_p) - plogis(clmm.graph_pol$Theta[3] - xaxis_p),
five_p=1 - (plogis(clmm.graph_pol$Theta[2] - xaxis_p))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one_p","two_p","three_p","four_p","five_p"))) %>%
rename(xaxis = xaxis_p) %>%
rename(yaxis = yaxis_p)
rbind(polish_tib, nor_tib)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis))
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted")
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted")
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines, y=0, xend=vlines, yend=1, # add estimates
lty="solid", alpha=.75)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vline_n, y=0, xend=vlines, yend=1, # add estimates
lty="solid", alpha=.75)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines, yend=1, # add estimates
lty="solid", alpha=.75)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines_n, yend=1, # add estimates
lty="solid", alpha=.75)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines_n, yend=1, # add estimates
lty="solid", alpha=.75, color = "red")
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines_n, yend=1, # add estimates
lty="solid", alpha=.75, color = "blue") +
annotate("segment", # type of annotation = line segments
x=vlines_p, y=0, xend=vlines_p, yend=1, # add estimates
lty="solid", alpha=.75, color = "red")
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines_n, yend=1, # add estimates
lty="solid", alpha=.75, color = "blue") +
annotate("segment", # type of annotation = line segments
x=vlines_p, y=0, xend=vlines_p, yend=1, # add estimates
lty="solid", alpha=.75, color = "red")# visual properties of vertical lines
annotate("text", # type of annotation = text
x=vlines_n,y=.75, # location of labels
label=c("acc_di_refl",
"acc_di_poss",
"unacc_mono_refl",
"unacc_mono_poss")
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines_n, yend=1, # add estimates
lty="solid", alpha=.75, color = "blue") +
annotate("segment", # type of annotation = line segments
x=vlines_p, y=0, xend=vlines_p, yend=1, # add estimates
lty="solid", alpha=.75, color = "red")# visual properties of vertical lines
annotate("text", # type of annotation = text
x=vlines_n,y=.75, # location of labels
label=c("acc_di_refl",
"acc_di_poss",
"unacc_mono_refl",
"unacc_mono_poss"), # label names aligned with vlines[1:4]
angle=90,vjust=-0.2)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines_n, yend=1, # add estimates
lty="solid", alpha=.75, color = "blue") +
annotate("segment", # type of annotation = line segments
x=vlines_p, y=0, xend=vlines_p, yend=1, # add estimates
lty="solid", alpha=.75, color = "red")# visual properties of vertical lines
annotate("text", # type of annotation = text
x=vlines_n,y=.75, # location of labels
label=c("acc_di_refl",
"acc_di_poss",
"unacc_mono_refl",
"unacc_mono_poss"), # label names aligned with vlines[1:4]
angle=90,vjust=-0.2)
rbind(polish_tib, nor_tib) %>%
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines_n, y=0, xend=vlines_n, yend=1, # add estimates
lty="solid", alpha=.75, color = "blue") +
annotate("segment", # type of annotation = line segments
x=vlines_p, y=0, xend=vlines_p, yend=1, # add estimates
lty="solid", alpha=.75, color = "red")# visual properties of vertical lines
annotate("text", # type of annotation = text
x=vlines_n,y=.75, # location of labels
label=c("acc_di_refl",
"acc_di_poss",
"unacc_mono_refl",
"unacc_mono_poss"), # label names aligned with vlines[1:4]
angle=90,vjust=-0.2) + # visual properties of text labels
scale_x_continuous(breaks=c(min(xaxis-.5),max(xaxis+.5))) + # expand x axis horizontally
scale_y_continuous(breaks=c(0,.25,.5,.75,1)) + # expand y axis with consistent breaks
ylab("Probability") + xlab("") + ggtitle("Norwegian Predicted curves") + # label plot properties
scale_colour_manual(values = colors) + # apply colours manually
theme_bw() + # improve visibility with white background
ggsave(here("plots", "norwegian_prob_curve.png"), dpi = 900)
unacceptable_mono_own_eng <- eng %>%
filter(sentence_type_eng == "unacceptable_mono_own") %>%
group_by(rating) %>%
summarise(unacceptable_mono_own = n())
unacceptable_di_own_eng <- eng %>%
filter(sentence_type_eng == "unacceptable_di_own") %>%
group_by(rating) %>%
summarise(unacceptable_di_own = n())
acceptable_mono_poss_eng <- eng %>%
filter(sentence_type_eng == "acceptable_mono_poss") %>%
group_by(rating) %>%
summarise(acceptable_mono_poss = n())
acceptable_di_poss_eng <- eng %>%
filter(sentence_type_eng == "acceptable_di_poss") %>%
group_by(rating) %>%
summarise(acceptable_di_poss = n())
un <- left_join(unacceptable_mono_own_eng, unacceptable_di_own_eng,
by = "rating")
ac <- left_join(acceptable_mono_poss_eng,  acceptable_di_poss_eng,
by = "rating")
left_join(ac, un, by = "rating") %>%
knitr::kable(caption = "English descriptive ratings")
