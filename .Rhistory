clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = norwegian_data, Hess=TRUE)
library(ordinal)
norwegian_data <- read.csv(here("data", "word_order", "nor.csv"))
clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = norwegian_data, Hess=TRUE)
library(ordinal)
english_data <- read.csv(here("data", "word_order", "eng.csv"))
clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = english_data, Hess=TRUE)
library(ordinal)
english_data <- read.csv(here("data", "word_order", "eng.csv"))
clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = english_data, Hess=TRUE)
library(ordinal)
library(here)
library(tidyverse)
english_data <- read.csv(here("data", "word_order", "eng.csv"))
clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = english_data, Hess=TRUE)
library(ordinal)
library(here)
library(tidyverse)
english_data <- read.csv(here("data", "word_order", "eng.csv"))
clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = english_data, Hess=TRUE)
vlines <- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph$beta[[3]])# sentence_type_norunacceptable_mono_poss
xaxis <- seq(min(vlines-.5), max(vlines+.5), length.out = 100) # create 100 steps
yaxis <- rep(c(0,1),50) # fill in 0s and 1s for y-axis
colors <- c("one" = "orangered",
"two" = "orange2",
"three" = "yellow",
"four" = "green",
"five" = "turquoise") # establish the colour-rating level correspondence
tibble(xaxis,yaxis) %>% # baseline tibble for plot dimensions
mutate(one=  plogis(clmm.graph$Theta[1] - xaxis), # add column for rating levels (must be adapted for larger scales)
two=  plogis(clmm.graph$Theta[2] - xaxis) - plogis(clmm.graph$Theta[1] - xaxis),
three=plogis(clmm.graph$Theta[3] - xaxis) - plogis(clmm.graph$Theta[2] - xaxis),
four= plogis(clmm.graph$Theta[4] - xaxis) - plogis(clmm.graph$Theta[3] - xaxis),
five=1 - (plogis(clmm.graph$Theta[2] - xaxis))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one","two","three","four","five"))) %>% # make factor and relevel
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines, y=0, xend=vlines, yend=1, # add estimates
lty="solid", alpha=.75) + # visual properties of vertical lines
annotate("text", # type of annotation = text
x=vlines,y=.75, # location of labels
label=c("main_post_verb",
"main_pre_verb",
"relative_post_verb",
"relative_pre_verb"), # label names aligned with vlines[1:4]
angle=90,vjust=-0.2) + # visual properties of text labels
scale_x_continuous(breaks=c(min(xaxis-.5),max(xaxis+.5))) + # expand x axis horizontally
scale_y_continuous(breaks=c(0,.25,.5,.75,1)) + # expand y axis with consistent breaks
ylab("Probability") + xlab("") + ggtitle("English Predicted curves") + # label plot properties
scale_colour_manual(values = colors) + # apply colours manually
theme_bw() + # improve visibility with white background
ggsave(here("plots", "word_order", "english_prob_curve_word_order.png"), dpi = 900)
library(ordinal)
polish_data <- read.csv(here("data", "word_order", "pol.csv"))
clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = polish_data, Hess=TRUE)
vlines <- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph$beta[[3]])# sentence_type_norunacceptable_mono_poss
xaxis <- seq(min(vlines-.5), max(vlines+.5), length.out = 100) # create 100 steps
yaxis <- rep(c(0,1),50) # fill in 0s and 1s for y-axis
colors <- c("one" = "orangered",
"two" = "orange2",
"three" = "yellow",
"four" = "green",
"five" = "turquoise") # establish the colour-rating level correspondence
tibble(xaxis,yaxis) %>% # baseline tibble for plot dimensions
mutate(one=  plogis(clmm.graph$Theta[1] - xaxis), # add column for rating levels (must be adapted for larger scales)
two=  plogis(clmm.graph$Theta[2] - xaxis) - plogis(clmm.graph$Theta[1] - xaxis),
three=plogis(clmm.graph$Theta[3] - xaxis) - plogis(clmm.graph$Theta[2] - xaxis),
four= plogis(clmm.graph$Theta[4] - xaxis) - plogis(clmm.graph$Theta[3] - xaxis),
five=1 - (plogis(clmm.graph$Theta[2] - xaxis))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one","two","three","four","five"))) %>% # make factor and relevel
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines, y=0, xend=vlines, yend=1, # add estimates
lty="solid", alpha=.75) + # visual properties of vertical lines
annotate("text", # type of annotation = text
x=vlines,y=.75, # location of labels
label=c("main_post_verb",
"main_pre_verb",
"relative_post_verb",
"relative_pre_verb"),  # label names aligned with vlines[1:4]
angle=90,vjust=-0.2) + # visual properties of text labels
scale_x_continuous(breaks=c(min(xaxis-.5),max(xaxis+.5))) + # expand x axis horizontally
scale_y_continuous(breaks=c(0,.25,.5,.75,1)) + # expand y axis with consistent breaks
ylab("Probability") + xlab("") + ggtitle("Polish Predicted curves") + # label plot properties
scale_colour_manual(values = colors) + # apply colours manually
theme_bw() + # improve visibility with white background
ggsave(here("plots", "word_order", "polish_prob_curve_word_order.png"), dpi = 900)
library(ordinal)
norwegian_data <- read.csv(here("data", "word_order", "nor.csv"))
clmm.graph <- clmm(as.factor(rating) ~ sentence_type + (1 | participant_no),
data = norwegian_data, Hess=TRUE)
vlines <- c(0, # intercept, 0 = sentence_type_noracceptable_di_refl
clmm.graph$beta[[1]], # sentence_type_noracceptable_mono_refl
clmm.graph$beta[[2]], # sentence_type_norunacceptable_di_poss
clmm.graph$beta[[3]])# sentence_type_norunacceptable_mono_poss
xaxis <- seq(min(vlines-.5), max(vlines+.5), length.out = 100) # create 100 steps
yaxis <- rep(c(0,1),50) # fill in 0s and 1s for y-axis
colors <- c("one" = "orangered",
"two" = "orange2",
"three" = "yellow",
"four" = "green",
"five" = "turquoise") # establish the colour-rating level correspondence
tibble(xaxis,yaxis) %>% # baseline tibble for plot dimensions
mutate(one=  plogis(clmm.graph$Theta[1] - xaxis), # add column for rating levels (must be adapted for larger scales)
two=  plogis(clmm.graph$Theta[2] - xaxis) - plogis(clmm.graph$Theta[1] - xaxis),
three=plogis(clmm.graph$Theta[3] - xaxis) - plogis(clmm.graph$Theta[2] - xaxis),
four= plogis(clmm.graph$Theta[4] - xaxis) - plogis(clmm.graph$Theta[3] - xaxis),
five=1 - (plogis(clmm.graph$Theta[2] - xaxis))) %>%
gather(rating,probability,3:7) %>% # make long data (change right-hand number to suit the ordinal levels)
mutate(rating=factor(rating,levels=c("one","two","three","four","five"))) %>% # make factor and relevel
ggplot(aes(x=xaxis,y=yaxis)) + # set up ggplot
geom_hline(yintercept=0,lty="dotted") + # add lower horizontal line
geom_hline(yintercept=1,lty="dotted") + # add upper horizontal line
geom_line(aes(y=probability,colour=rating),lwd=1,alpha=.8) + # add predicted curves
annotate("segment", # type of annotation = line segments
x=vlines, y=0, xend=vlines, yend=1, # add estimates
lty="solid", alpha=.75) + # visual properties of vertical lines
annotate("text", # type of annotation = text
x=vlines,y=.75, # location of labels
label=c("main_post_verb",
"main_pre_verb",
"relative_post_verb",
"relative_pre_verb"),  # label names aligned with vlines[1:4]
angle=90,vjust=-0.2) + # visual properties of text labels
scale_x_continuous(breaks=c(min(xaxis-.5),max(xaxis+.5))) + # expand x axis horizontally
scale_y_continuous(breaks=c(0,.25,.5,.75,1)) + # expand y axis with consistent breaks
ylab("Probability") + xlab("") + ggtitle("norwegian Predicted curves") + # label plot properties
scale_colour_manual(values = colors) + # apply colours manually
theme_bw() + # improve visibility with white background
ggsave(here("plots", "word_order", "norwegian_prob_curve_word_order.png"), dpi = 900)
norway_data <- read.csv(here("data", "word_order", "nor.csv"))
polish_data <- read.csv(here("data", "word_order", "pol.csv"))
english_data <- read.csv(here("data", "word_order", "eng.csv"))
fit_sc1 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = norway_data,
family = cumulative("probit"))
summary(fit_sc1)
library(tidyverse)
library(here)
library(brms)
# norway analysis
fit_sc1 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = norway_data,
family = cumulative("probit"))
summary(fit_sc1)
conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
conditional_effects(fit_sc1, "sentence_type", categorical = TRUE) %>%
save.image()
fit_sc3 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = english_data,
family = cumulative("probit"))
summary(fit_sc3)
conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
fit_sc2 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = polish_data,
family = cumulative("probit"))
summary(fit_sc2)
conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
knitr::include_graphics(here("plots", "word_order", "nor_word_order.png"))
knitr::include_graphics(here("plots", "word_order", "polish_prob_curve_word_order.png"))
knitr::include_graphics(here("plots", "word_order", "polish_word_order.png"))
knitr::include_graphics(here("plots", "word_order", "pol_word_order.png"))
knitr::include_graphics(here("plots", "word_order", "polish_prob_curve_word_order.png"))
summary(fit_sc2)
fixef(fit_sc2)
pol_fe <- fixef(fit_sc2) %>%
as.data.frame()
pol_fe$Estimate[1] + pol_fe$Estimate[5]
logit(pol_fe$Estimate[1] + pol_fe$Estimate[5])
library(LaplacesDemon)
logit(pol_fe$Estimate[1] + pol_fe$Estimate[5])
logistic(pol_fe$Estimate[1] + pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[1] + pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[1])
invlogit(pol_fe$Estimate[1] + pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[2] + pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[3] + pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[4] + pol_fe$Estimate[5])
conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
pol_fe$Estimate[4]
invlogit(pol_fe$Estimate[4])
invlogit(pol_fe$Estimate[1]
invlogit(pol_fe$Estimate[1] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[2] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[3] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[4] - pol_fe$Estimate[5])
# main pre-verb by hand
invlogit(pol_fe$Estimate[1])
invlogit(pol_fe$Estimate[1] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[2] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[3] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[4] - pol_fe$Estimate[5])
conditional_effects(fit_sc2, "sentence_type", categorical = TRUE, ordinal = TRUE)
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
View(obj)
obj[["sentence_type:cats__"]][["estimate__"]]
obj[["sentence_type:cats__"]][["estimate__"]]
obj[["sentence_type:cats__"]]
obj[["sentence_type:cats__"]][["sentence_type"]]
source('~/Documents/GitHub/l3_norway/scripts/word_order/01_bayesian_models_plots.R', echo=TRUE)
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE) %>%
as.data.frame()
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE) %>%
as.data.frame()
obj[["sentence_type:cats__"]][["as.integer(rating)"]]
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE) %>%
as.data.frame()
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE) %>%
as.data.frame()
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE) %>%
as.data.frame()
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE) %>%
as.data.frame()
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE) %>%
as.data.frame()
View(obj)
View(obj)
View(obj)
obj[["sentence_type:cats__"]][["sentence_type"]]
View(obj)
View(obj[["sentence_type:cats__"]])
(obj[["sentence_type:cats__"]])
(obj[["sentence_type:cats__"]])
data.frame(obj[["sentence_type:cats__"]]))
data.frame(obj[["sentence_type:cats__"]])
english_probs <- data.frame(obj[["sentence_type:cats__"]])
View(english_probs)
english_probs <- data.frame(obj[["sentence_type:cats__"]]) %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point()
1 + 1
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point()
english_probs
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs <- data.frame(obj[["sentence_type:cats__"]])
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
library(tidyverse)
library(here)
library(brms)
library(LaplacesDemon)
# norway analysis
conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange()
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(ymin = lower__, ymax = upper__)
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
conditional_effects
conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
View(obj)
obj
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_jitter() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
library(tidyverse)
library(here)
library(brms)
library(LaplacesDemon)
# norway analysis
norway_data <- read.csv(here("data", "word_order", "nor.csv"))
polish_data <- read.csv(here("data", "word_order", "pol.csv"))
english_data <- read.csv(here("data", "word_order", "eng.csv"))
fit_sc1 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = norway_data,
family = cumulative("probit"))
summary(fit_sc1)
conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
fit_sc2 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = polish_data,
family = cumulative("probit"))
summary(fit_sc2)
pol_fe <- fixef(fit_sc2) %>%
as.data.frame()
# main pre-verb by hand
invlogit(pol_fe$Estimate[1])
invlogit(pol_fe$Estimate[1] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[2] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[3] - pol_fe$Estimate[5])
invlogit(pol_fe$Estimate[4] - pol_fe$Estimate[5])
conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
fit_sc3 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = english_data,
family = cumulative("probit"))
summary(fit_sc3)
obj <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
english_probs <- data.frame(obj[["sentence_type:cats__"]])
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
nor_probs <- conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
fit_sc2 <- brm(
formula = as.integer(rating) ~ 1 + sentence_type,
data = polish_data,
family = cumulative("probit"))
summary(fit_sc2)
pol_probs <- conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
pol_probs <- conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
nor_probs <- conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
pol_probs <- conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
nor_probs <- conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
rbind(english_probs, nor_probs, pol_probs)
pol_probs <- conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
pol_probs_df <- data.frame(pol_probs[["sentence_type:cats__"]])
nor_probs <- conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
nor_probs_df <- data.frame(nor_probs[["sentence_type:cats__"]])
english_probs <- data.frame(eng_prob[["sentence_type:cats__"]])
eng_prob <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs <- data.frame(eng_prob[["sentence_type:cats__"]])
rbind(english_probs, pol_probs_df, nor_probs_df)
all_df <- rbind(english_probs, pol_probs_df, nor_probs_df)
eng_prob <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs <- data.frame(eng_prob[["sentence_type:cats__"]])
nor_probs <- conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
nor_probs_df <- data.frame(nor_probs[["sentence_type:cats__"]])
pol_probs <- conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
pol_probs_df <- data.frame(pol_probs[["sentence_type:cats__"]])
eng_prob <- conditional_effects(fit_sc3, "sentence_type", categorical = TRUE)
english_probs <- data.frame(eng_prob[["sentence_type:cats__"]]) %>%
mutate(language = "English")
nor_probs <- conditional_effects(fit_sc1, "sentence_type", categorical = TRUE)
nor_probs_df <- data.frame(nor_probs[["sentence_type:cats__"]])  %>%
mutate(language = "Nor")
pol_probs <- conditional_effects(fit_sc2, "sentence_type", categorical = TRUE)
pol_probs_df <- data.frame(pol_probs[["sentence_type:cats__"]])  %>%
mutate(language = "Polish")
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df <- rbind(english_probs, pol_probs_df, nor_probs_df)
all_df <- rbind(english_probs, pol_probs_df, nor_probs_df) %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
english_probs %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df <- rbind(english_probs, pol_probs_df, nor_probs_df) %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df <- rbind(english_probs, pol_probs_df, nor_probs_df) %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__))
rbind(english_probs, pol_probs_df, nor_probs_df)
all_df <- rbind(english_probs, pol_probs_df, nor_probs_df)
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1))) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) +
geom_point(position = position_dodge(width = 1)) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
View(all_df)
all_df %>%
filter(sentence_type == "main_post_verb", "main_pre_verb") %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_post_verb", "main_pre_verb")
all_df %>%
filter(sentence_type == "main_post_verb" | "main_pre_verb")
all_df %>%
filter(sentence_type == "main_post_verb")
all_df %>%
filter(sentence_type == "main_post_verb") %>%
ggplot(aes(x = effect1__, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__)) + geom_point(alpha = .8) +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__), alpha = .8) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "relative_pre_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "relative_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_pre_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "relative_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_pre_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "relative_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "relative_pre_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
all_df %>%
filter(sentence_type == "main_post_verb") %>%
ggplot(aes(x = language, y = estimate__, color = effect2__, alpha = .8)) + geom_point() +
geom_pointrange(aes(ymin = lower__, ymax = upper__))
